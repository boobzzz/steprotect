{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * isLength(3)\n * // => true\n *\n * isLength(Number.MIN_VALUE)\n * // => false\n *\n * isLength(Infinity)\n * // => false\n *\n * isLength('3')\n * // => false\n */\n\nfunction isLength(value) {\n  return typeof value === 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nvar _default = isLength;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/node_modules/@bit/lodash.lodash.is-length/dist/isLength.js"],"names":["Object","defineProperty","exports","value","MAX_SAFE_INTEGER","isLength","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;AAEA;;AACA,IAAIE,gBAAgB,GAAG,gBAAvB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAC,CAAtC,IAA2CA,KAAK,GAAG,CAAR,IAAa,CAAxD,IAA6DA,KAAK,IAAIC,gBAA7E;AACD;;AAED,IAAIE,QAAQ,GAAGD,QAAf;AACAH,OAAO,CAAC,SAAD,CAAP,GAAqBI,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * isLength(3)\n * // => true\n *\n * isLength(Number.MIN_VALUE)\n * // => false\n *\n * isLength(Infinity)\n * // => false\n *\n * isLength('3')\n * // => false\n */\n\nfunction isLength(value) {\n  return typeof value === 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nvar _default = isLength;\nexports[\"default\"] = _default;\n\n//# sourceMappingURL=isLength.js.map"]},"metadata":{},"sourceType":"script"}