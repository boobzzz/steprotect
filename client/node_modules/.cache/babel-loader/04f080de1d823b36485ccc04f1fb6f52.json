{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _baseMerge = _interopRequireDefault(require(\"./.internal/baseMerge.js\"));\n\nvar _createAssigner = _interopRequireDefault(require(\"./.internal/createAssigner.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This method is like `assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * const object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * }\n *\n * const other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * }\n *\n * merge(object, other)\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\n\n\nvar merge = (0, _createAssigner[\"default\"])(function (object, source, srcIndex) {\n  (0, _baseMerge[\"default\"])(object, source, srcIndex);\n});\nvar _default = merge;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/node_modules/@bit/lodash.lodash.merge/dist/merge.js"],"names":["Object","defineProperty","exports","value","_baseMerge","_interopRequireDefault","require","_createAssigner","obj","__esModule","merge","object","source","srcIndex","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,0BAAD,CAAR,CAAvC;;AAEA,IAAIC,eAAe,GAAGF,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAA5C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAIE,KAAK,GAAG,CAAC,GAAGH,eAAe,CAAC,SAAD,CAAnB,EAAgC,UAAUI,MAAV,EAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AAC9E,GAAC,GAAGT,UAAU,CAAC,SAAD,CAAd,EAA2BO,MAA3B,EAAmCC,MAAnC,EAA2CC,QAA3C;AACD,CAFW,CAAZ;AAGA,IAAIC,QAAQ,GAAGJ,KAAf;AACAR,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _baseMerge = _interopRequireDefault(require(\"./.internal/baseMerge.js\"));\n\nvar _createAssigner = _interopRequireDefault(require(\"./.internal/createAssigner.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * This method is like `assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * const object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * }\n *\n * const other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * }\n *\n * merge(object, other)\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = (0, _createAssigner[\"default\"])(function (object, source, srcIndex) {\n  (0, _baseMerge[\"default\"])(object, source, srcIndex);\n});\nvar _default = merge;\nexports[\"default\"] = _default;\n\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"script"}