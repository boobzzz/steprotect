{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\react\\\\steprotect\\\\client\\\\src\\\\components\\\\Form\\\\Call\\\\FormCall.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { css } from \"@emotion/core\";\nimport withConnect from '../../HOC/withConnect';\nimport * as selectors from '../redux/selectors';\nimport * as actions from '../redux/actions';\nimport ButtonSpinner from '../../UI/Spinners/Button/ButtonSpinner';\nimport FieldPhone from '../../UI/Field/Phone/FieldPhone';\nimport { GoArrowRight } from 'react-icons/go';\nimport classes from './FormCall.module.css';\nconst initialValues = {\n  phone: ''\n};\nconst validationSchema = Yup.object({\n  phone: Yup.string().min(13, 'Номер телефону надто короткий *')\n});\nconst style = css`\n    width: 200px;\n    height: 5px;\n`;\n\nconst FormCall = props => {\n  const {\n    slide,\n    status,\n    isLoading,\n    sendOrder,\n    setLoader,\n    resetStatus\n  } = props;\n  const [callForm, setCallForm] = useState(false);\n  const [successMsg, setSuccessMsg] = useState(false);\n  useEffect(() => {\n    window.addEventListener('click', () => {\n      setCallForm(false);\n      setSuccessMsg(false);\n      resetStatus();\n    });\n    status === 'success' ? setSuccessMsg(true) : setSuccessMsg(false);\n  }, [status, resetStatus]);\n\n  const toggleCallOrderBtn = e => {\n    e.stopPropagation();\n    setCallForm(true);\n    setSuccessMsg(false);\n  };\n\n  const handleSubmit = (values, {\n    resetForm\n  }) => {\n    let options = {\n      method: 'POST',\n      body: values\n    };\n    setLoader(true);\n    sendOrder('/call', options);\n    resetForm({\n      values: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: successMsg ? `${classes.Msg} ${classes.Success}` : `${classes.Msg} ${classes.Failed}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"\\u0414\\u0437\\u0432\\u0456\\u043D\\u043E\\u043A \\u0437\\u0430\\u043C\\u043E\\u0432\\u043B\\u0435\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E\"), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: toggleCallOrderBtn,\n    className: callForm ? `${classes.Button} ${classes.Clicked}` : `${classes.Button}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, slide.btn), isLoading ? /*#__PURE__*/React.createElement(ButtonSpinner, {\n    style: style,\n    color: \"#FF0000\",\n    loading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 20\n    }\n  }) : /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 20\n    }\n  }, () => {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FieldPhone, {\n      id: \"phone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(GoArrowRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 41\n      }\n    })));\n  })));\n};\n\nexport default withConnect(FormCall, selectors, actions);","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/src/components/Form/Call/FormCall.js"],"names":["React","useState","useEffect","Formik","Form","Yup","css","withConnect","selectors","actions","ButtonSpinner","FieldPhone","GoArrowRight","classes","initialValues","phone","validationSchema","object","string","min","style","FormCall","props","slide","status","isLoading","sendOrder","setLoader","resetStatus","callForm","setCallForm","successMsg","setSuccessMsg","window","addEventListener","toggleCallOrderBtn","e","stopPropagation","handleSubmit","values","resetForm","options","method","body","Msg","Success","Failed","Button","Clicked","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { css } from \"@emotion/core\";\r\nimport withConnect from '../../HOC/withConnect';\r\nimport * as selectors from '../redux/selectors';\r\nimport * as actions from '../redux/actions';\r\n\r\nimport ButtonSpinner from '../../UI/Spinners/Button/ButtonSpinner';\r\nimport FieldPhone from '../../UI/Field/Phone/FieldPhone';\r\nimport { GoArrowRight } from 'react-icons/go';\r\n\r\nimport classes from './FormCall.module.css';\r\n\r\nconst initialValues = {\r\n    phone: ''\r\n}\r\nconst validationSchema = Yup.object({\r\n    phone: Yup.string().min(13, 'Номер телефону надто короткий *')\r\n})\r\nconst style = css`\r\n    width: 200px;\r\n    height: 5px;\r\n`\r\nconst FormCall = (props) => {\r\n    const { slide, status, isLoading, sendOrder, setLoader, resetStatus } = props\r\n    const [ callForm, setCallForm ] = useState(false)\r\n    const [ successMsg, setSuccessMsg ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', () => {\r\n            setCallForm(false)\r\n            setSuccessMsg(false)\r\n            resetStatus()\r\n        })\r\n\r\n        status === 'success' ? setSuccessMsg(true) : setSuccessMsg(false)\r\n    }, [status, resetStatus])\r\n\r\n    const toggleCallOrderBtn = (e) => {\r\n        e.stopPropagation()\r\n        setCallForm(true)\r\n        setSuccessMsg(false)\r\n    }\r\n\r\n    const handleSubmit = (values, {resetForm}) => {\r\n        let options = {\r\n            method: 'POST',\r\n            body: values\r\n        }\r\n\r\n        setLoader(true)\r\n        sendOrder('/call', options)\r\n        resetForm({ values: '' })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span className={successMsg\r\n                             ? `${classes.Msg} ${classes.Success}`\r\n                             : `${classes.Msg} ${classes.Failed}`}>\r\n                Дзвінок замовлено успішно\r\n            </span>\r\n            <div\r\n                onClick={toggleCallOrderBtn}\r\n                className={callForm\r\n                           ? `${classes.Button} ${classes.Clicked}`\r\n                           : `${classes.Button}`}>\r\n                <i>{slide.btn}</i>\r\n                {isLoading\r\n                 ? <ButtonSpinner\r\n                        style={style}\r\n                        color=\"#FF0000\"\r\n                        loading={isLoading} />\r\n                 : <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={handleSubmit}>\r\n                        {() => {\r\n                            return (\r\n                                <Form>\r\n                                    <FieldPhone id=\"phone\" />\r\n                                    <button type=\"submit\">\r\n                                        <GoArrowRight />\r\n                                    </button>\r\n                                </Form>\r\n                            )\r\n                        }}\r\n                    </Formik>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withConnect(FormCall, selectors, actions)\r\n"]},"metadata":{},"sourceType":"module"}