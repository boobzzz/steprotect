{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/** Used as references for various `Number` constants. */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\nfunction isIndex(value, length) {\n  var type = _typeof(value);\n\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type === 'number' || type !== 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nvar _default = isIndex;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/node_modules/@bit/lodash.lodash.internal.is-index/dist/isIndex.js"],"names":["Object","defineProperty","exports","value","_typeof","obj","Symbol","iterator","constructor","prototype","MAX_SAFE_INTEGER","reIsUint","isIndex","length","type","test","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,SAASE,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;AAE1X;;;AACA,IAAIK,gBAAgB,GAAG,gBAAvB;AACA;;AAEA,IAAIC,QAAQ,GAAG,kBAAf;AACA;;;;;;;;;AASA,SAASC,OAAT,CAAiBT,KAAjB,EAAwBU,MAAxB,EAAgC;AAC9B,MAAIC,IAAI,GAAGV,OAAO,CAACD,KAAD,CAAlB;;AAEAU,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAV,GAAiBH,gBAAjB,GAAoCG,MAA7C;AACA,SAAO,CAAC,CAACA,MAAF,KAAaC,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,QAAT,IAAqBH,QAAQ,CAACI,IAAT,CAAcZ,KAAd,CAAvD,KAAgFA,KAAK,GAAG,CAAC,CAAzF,IAA8FA,KAAK,GAAG,CAAR,IAAa,CAA3G,IAAgHA,KAAK,GAAGU,MAA/H;AACD;;AAED,IAAIG,QAAQ,GAAGJ,OAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\nfunction isIndex(value, length) {\n  var type = _typeof(value);\n\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type === 'number' || type !== 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nvar _default = isIndex;\nexports[\"default\"] = _default;\n\n//# sourceMappingURL=isIndex.js.map"]},"metadata":{},"sourceType":"script"}