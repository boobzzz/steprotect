{"ast":null,"code":"// import mergeDeep from 'lodash.merge'\nimport mergeDeep from '@bit/lodash.lodash.merge'; //Fetch JSON\n\nexport const fetchJSON = async (url, options = {}) => {\n  options = mergeDeep(options, {\n    // credentials: 'same-origin',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(options.body)\n  });\n  let resp = await fetch(url, options);\n\n  if ((resp.headers.get('Content-Type') || '').includes('application/json')) {\n    try {\n      return {\n        body: await resp.json(),\n        status: resp.status\n      };\n    } catch (err) {\n      // Bad JSON\n      throw new Error(`Status: ${resp.status}, API: Invalid JSON`);\n    }\n  } else {\n    // Bad Content-type\n    throw new Error(`Status: ${resp.status}, API: Invalid mime-type`);\n  }\n};","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/src/utils/api/fetch.js"],"names":["mergeDeep","fetchJSON","url","options","headers","body","JSON","stringify","resp","fetch","get","includes","json","status","err","Error"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,0BAAtB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,OAAOC,GAAP,EAAYC,OAAO,GAAG,EAAtB,KAA6B;AAClDA,EAAAA,OAAO,GAAGH,SAAS,CAACG,OAAD,EAAU;AACzB;AACAC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFgB;AAMzBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACE,IAAvB;AANmB,GAAV,CAAnB;AASA,MAAIG,IAAI,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAMC,OAAN,CAAtB;;AAEA,MAAI,CAACK,IAAI,CAACJ,OAAL,CAAaM,GAAb,CAAiB,cAAjB,KAAoC,EAArC,EAAyCC,QAAzC,CAAkD,kBAAlD,CAAJ,EAA2E;AACvE,QAAI;AACA,aAAO;AACHN,QAAAA,IAAI,EAAE,MAAMG,IAAI,CAACI,IAAL,EADT;AAEHC,QAAAA,MAAM,EAAEL,IAAI,CAACK;AAFV,OAAP;AAIH,KALD,CAKE,OAAOC,GAAP,EAAY;AACV;AACA,YAAM,IAAIC,KAAJ,CAAW,WAAUP,IAAI,CAACK,MAAO,qBAAjC,CAAN;AACH;AACJ,GAVD,MAUO;AACH;AACA,UAAM,IAAIE,KAAJ,CAAW,WAAUP,IAAI,CAACK,MAAO,0BAAjC,CAAN;AACH;AACJ,CA1BM","sourcesContent":["// import mergeDeep from 'lodash.merge'\r\nimport mergeDeep from '@bit/lodash.lodash.merge'\r\n\r\n//Fetch JSON\r\nexport const fetchJSON = async (url, options = {}) => {\r\n    options = mergeDeep(options, {\r\n        // credentials: 'same-origin',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(options.body)\r\n    })\r\n\r\n    let resp = await fetch(url, options)\r\n\r\n    if ((resp.headers.get('Content-Type') || '').includes('application/json')) {\r\n        try {\r\n            return {\r\n                body: await resp.json(),\r\n                status: resp.status\r\n            }\r\n        } catch (err) {\r\n            // Bad JSON\r\n            throw new Error(`Status: ${resp.status}, API: Invalid JSON`)\r\n        }\r\n    } else {\r\n        // Bad Content-type\r\n        throw new Error(`Status: ${resp.status}, API: Invalid mime-type`)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}