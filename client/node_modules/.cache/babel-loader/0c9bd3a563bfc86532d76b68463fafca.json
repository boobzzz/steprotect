{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\react\\\\steprotect\\\\client\\\\src\\\\components\\\\Form\\\\Order\\\\FormOrder.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { css } from \"@emotion/core\";\nimport withConnect from '../../HOC/withConnect';\nimport * as selectors from '../redux/selectors';\nimport * as actions from '../redux/actions';\nimport ButtonSpinner from '../../UI/Spinners/Button/ButtonSpinner';\nimport FieldText from '../../UI/Field/Text/FieldText';\nimport FieldPhone from '../../UI/Field/Phone/FieldPhone';\nimport FieldSelect from '../../UI/Field/Select/FieldSelect';\nimport classes from './FormOrder.module.css';\nconst options = [{\n  name: 'Виберіть послугу...',\n  value: ''\n}, {\n  name: 'Відеоспостереження',\n  value: 'video'\n}, {\n  name: 'Охоронна сигналізація',\n  value: 'alarm'\n}, {\n  name: 'Системи доступу',\n  value: 'access'\n}, {\n  name: 'Інтернет',\n  value: 'intenet'\n}, {\n  name: 'GSM зв\\'язок',\n  value: 'gsm'\n}];\nconst initialValues = {\n  name: '',\n  services: '',\n  phone: '',\n  email: ''\n};\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Введіть Ваше ім\\'я *'),\n  services: Yup.string().required('Виберіть послугу *'),\n  phone: Yup.string().min(13, 'Номер телефону надто короткий *'),\n  email: Yup.string().required('Введіть Вашу електронну скриньку *').email('Невірний формат електронної скриньки *')\n});\nconst style = css`\n    width: 100px;\n    height: 3px;\n`;\n\nconst FormOrder = props => {\n  const {\n    modalShown,\n    status,\n    isLoading,\n    sendOrder,\n    setLoader,\n    resetStatus\n  } = props;\n  const [successMsg, setSuccessMsg] = useState(false);\n  useEffect(() => {\n    if (!modalShown) resetStatus();\n    status === 'success' ? setSuccessMsg(true) : setSuccessMsg(false);\n  }, [modalShown, status, resetStatus]);\n\n  const handleSubmit = (values, {\n    resetForm\n  }) => {\n    let options = {\n      method: 'POST',\n      body: values\n    };\n    setLoader(true);\n    sendOrder('/order', options);\n    resetForm({\n      values: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, () => {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FieldText, {\n      id: \"name\",\n      type: \"text\",\n      label: \"\\u0456\\u043C'\\u044F *\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FieldSelect, {\n      id: \"services\",\n      label: \"\\u043F\\u043E\\u0441\\u043B\\u0443\\u0433\\u0430 *\",\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FieldPhone, {\n      id: \"phone\",\n      label: \"\\u043D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0443 *\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FieldText, {\n      id: \"email\",\n      type: \"email\",\n      label: \"\\u0435\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430 \\u0441\\u043A\\u0440\\u0438\\u043D\\u044C\\u043A\\u0430 *\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: successMsg ? `${classes.Msg} ${classes.Success}` : `${classes.Msg} ${classes.Failed}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, \"\\u0417\\u0430\\u043C\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044F \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E \\u0441\\u0444\\u043E\\u0440\\u043C\\u043E\\u0432\\u0430\\u043D\\u043E\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.SubmitBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }\n    }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 40\n      }\n    }, /*#__PURE__*/React.createElement(ButtonSpinner, {\n      style: style,\n      color: \"#FF0000\",\n      loading: isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 44\n      }\n    })) : /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 40\n      }\n    }, \"\\u0437\\u0430\\u043C\\u043E\\u0432\\u0438\\u0442\\u0438\")));\n  })));\n};\n\nexport default withConnect(FormOrder, selectors, actions);","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/src/components/Form/Order/FormOrder.js"],"names":["React","useState","useEffect","Formik","Form","Yup","css","withConnect","selectors","actions","ButtonSpinner","FieldText","FieldPhone","FieldSelect","classes","options","name","value","initialValues","services","phone","email","validationSchema","object","string","required","min","style","FormOrder","props","modalShown","status","isLoading","sendOrder","setLoader","resetStatus","successMsg","setSuccessMsg","handleSubmit","values","resetForm","method","body","Msg","Success","Failed","SubmitBtn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { css } from \"@emotion/core\";\r\nimport withConnect from '../../HOC/withConnect';\r\nimport * as selectors from '../redux/selectors';\r\nimport * as actions from '../redux/actions';\r\n\r\nimport ButtonSpinner from '../../UI/Spinners/Button/ButtonSpinner';\r\nimport FieldText from '../../UI/Field/Text/FieldText';\r\nimport FieldPhone from '../../UI/Field/Phone/FieldPhone';\r\nimport FieldSelect from '../../UI/Field/Select/FieldSelect';\r\n\r\nimport classes from './FormOrder.module.css';\r\n\r\nconst options = [\r\n    {name: 'Виберіть послугу...', value: ''},\r\n    {name: 'Відеоспостереження', value: 'video'},\r\n    {name: 'Охоронна сигналізація', value: 'alarm'},\r\n    {name: 'Системи доступу', value: 'access'},\r\n    {name: 'Інтернет', value: 'intenet'},\r\n    {name: 'GSM зв\\'язок', value: 'gsm'},\r\n]\r\nconst initialValues = {\r\n    name: '',\r\n    services: '',\r\n    phone: '',\r\n    email: ''\r\n}\r\nconst validationSchema = Yup.object({\r\n    name: Yup.string().required('Введіть Ваше ім\\'я *'),\r\n    services: Yup.string().required('Виберіть послугу *'),\r\n    phone: Yup.string().min(13, 'Номер телефону надто короткий *'),\r\n    email: Yup.string()\r\n        .required('Введіть Вашу електронну скриньку *')\r\n        .email('Невірний формат електронної скриньки *'),\r\n})\r\nconst style = css`\r\n    width: 100px;\r\n    height: 3px;\r\n`\r\n\r\nconst FormOrder = (props) => {\r\n    const { modalShown, status, isLoading, sendOrder, setLoader, resetStatus } = props\r\n    const [ successMsg, setSuccessMsg ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!modalShown) resetStatus()\r\n\r\n        status === 'success' ? setSuccessMsg(true) : setSuccessMsg(false)\r\n    }, [modalShown, status, resetStatus])\r\n\r\n    const handleSubmit = (values, {resetForm}) => {\r\n        let options = {\r\n            method: 'POST',\r\n            body: values\r\n        }\r\n\r\n        setLoader(true)\r\n        sendOrder('/order', options)\r\n        resetForm({ values: '' })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.Form}>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={handleSubmit}>\r\n                    {() => {\r\n                        return (\r\n                            <Form>\r\n                                <FieldText id=\"name\" type=\"text\" label=\"ім'я *\" />\r\n                                <FieldSelect id=\"services\" label=\"послуга *\" options={options} />\r\n                                <FieldPhone id=\"phone\" label=\"номер телефону *\" />\r\n                                <FieldText id=\"email\" type=\"email\" label=\"електронна скринька *\" />\r\n                                <span className={successMsg\r\n                                                 ? `${classes.Msg} ${classes.Success}`\r\n                                                 : `${classes.Msg} ${classes.Failed}`}>\r\n                                    Замовлення успішно сформовано\r\n                                </span>\r\n                                <div className={classes.SubmitBtn}>\r\n                                    {isLoading\r\n                                     ? <div>\r\n                                           <ButtonSpinner\r\n                                               style={style}\r\n                                               color=\"#FF0000\"\r\n                                               loading={isLoading} />\r\n                                       </div>\r\n                                     : <button type=\"submit\">\r\n                                           замовити\r\n                                       </button>}\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withConnect(FormOrder, selectors, actions);\r\n"]},"metadata":{},"sourceType":"module"}