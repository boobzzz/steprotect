{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\react\\\\steprotect\\\\client\\\\src\\\\components\\\\Blog\\\\Admin\\\\Form\\\\AdminForm.js\";\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { css } from \"@emotion/core\";\nimport withConnect from '../../../HOC/withConnect';\nimport * as selectors from '../../redux/selectors';\nimport * as actions from '../../redux/actions';\nimport * as C from '../../../../utils/api/constants';\nimport ButtonSpinner from '../../../UI/Spinners/Button/ButtonSpinner';\nimport FieldText from '../../../UI/Field/Text/FieldText';\nimport FieldTextArea from '../../../UI/Field/TextArea/FieldTextArea';\nimport classes from './AdminForm.module.css';\nconst initialValues = {\n  img: '',\n  title: '',\n  text: ''\n};\nconst validationSchema = Yup.object({\n  img: Yup.string().required('Введіть URL зображення *'),\n  title: Yup.string().required('Введіть назву *'),\n  text: Yup.string().required('Введіть текст *')\n});\nconst style = css`\n    width: 100px;\n    height: 3px;\n`;\n\nconst AdminForm = props => {\n  const {\n    currentPost,\n    status,\n    isLoading,\n    createPost,\n    readPost,\n    updatePost,\n    setLoader,\n    resetStatus\n  } = props;\n  const {\n    id\n  } = useParams();\n  const currentPostValues = {\n    img: currentPost.img,\n    title: currentPost.title,\n    text: currentPost.text\n  };\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    readPost(`${C.API_ENDPOINT}/posts/${id}`, {\n      signal\n    });\n    window.addEventListener('click', () => {\n      resetStatus();\n    });\n    return () => {\n      controller.abort();\n      window.removeEventListener('click', () => {\n        resetStatus();\n      });\n    };\n  }, [readPost, resetStatus, id, status]);\n\n  const handleSubmit = (values, {\n    resetForm\n  }) => {\n    let options = {\n      method: !id ? 'POST' : 'PUT',\n      body: values\n    };\n    setLoader(true);\n    !id ? createPost('/posts', options) : updatePost(`/posts/${id}`, options);\n    if (!id) resetForm();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.NewPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, !id ? 'Новий пост' : 'Редагувати пост')), /*#__PURE__*/React.createElement(\"div\", {\n    className: `wrapper ${classes.Form}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: !id ? initialValues : currentPostValues,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, () => {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FieldText, {\n      id: \"img\",\n      type: \"text\",\n      label: \"URL \\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F *\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FieldText, {\n      id: \"title\",\n      type: \"text\",\n      label: \"\\u043D\\u0430\\u0437\\u0432\\u0430 *\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextArea, {\n      id: \"text\",\n      type: \"text\",\n      label: \"\\u0442\\u0435\\u043A\\u0441\\u0442 *\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: status === 'success' ? `${classes.Msg} ${classes.Success}` : `${classes.Msg} ${classes.Failed}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, !id ? 'Пост успішно додано' : 'Пост успішно змінено'), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.SubmitBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }\n    }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 40\n      }\n    }, /*#__PURE__*/React.createElement(ButtonSpinner, {\n      style: style,\n      color: \"#FF0000\",\n      loading: isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 44\n      }\n    })) : /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 40\n      }\n    }, \"\\u0437\\u0430\\u043F\\u043E\\u0441\\u0442\\u0438\\u0442\\u0438\")));\n  })));\n};\n\nexport default withConnect(AdminForm, selectors, actions);","map":{"version":3,"sources":["C:/Users/admin/react/steprotect/client/src/components/Blog/Admin/Form/AdminForm.js"],"names":["React","useEffect","useParams","Formik","Form","Yup","css","withConnect","selectors","actions","C","ButtonSpinner","FieldText","FieldTextArea","classes","initialValues","img","title","text","validationSchema","object","string","required","style","AdminForm","props","currentPost","status","isLoading","createPost","readPost","updatePost","setLoader","resetStatus","id","currentPostValues","controller","AbortController","signal","API_ENDPOINT","window","addEventListener","abort","removeEventListener","handleSubmit","values","resetForm","options","method","body","NewPost","Header","Msg","Success","Failed","SubmitBtn"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { css } from \"@emotion/core\";\r\nimport withConnect from '../../../HOC/withConnect';\r\nimport * as selectors from '../../redux/selectors';\r\nimport * as actions from '../../redux/actions';\r\nimport * as C from '../../../../utils/api/constants';\r\n\r\nimport ButtonSpinner from '../../../UI/Spinners/Button/ButtonSpinner';\r\nimport FieldText from '../../../UI/Field/Text/FieldText';\r\nimport FieldTextArea from '../../../UI/Field/TextArea/FieldTextArea';\r\nimport classes from './AdminForm.module.css';\r\n\r\nconst initialValues = {\r\n    img: '',\r\n    title: '',\r\n    text: ''\r\n}\r\nconst validationSchema = Yup.object({\r\n    img: Yup.string().required('Введіть URL зображення *'),\r\n    title: Yup.string().required('Введіть назву *'),\r\n    text: Yup.string().required('Введіть текст *')\r\n})\r\nconst style = css`\r\n    width: 100px;\r\n    height: 3px;\r\n`\r\n\r\nconst AdminForm = (props) => {\r\n    const {\r\n        currentPost,\r\n        status,\r\n        isLoading,\r\n        createPost,\r\n        readPost,\r\n        updatePost,\r\n        setLoader,\r\n        resetStatus\r\n    } = props\r\n    const { id } = useParams()\r\n    const currentPostValues = {\r\n        img: currentPost.img,\r\n        title: currentPost.title,\r\n        text: currentPost.text\r\n    }\r\n\r\n    useEffect(() => {\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n\r\n        readPost(`${C.API_ENDPOINT}/posts/${id}`, {signal})\r\n        window.addEventListener('click', () => {\r\n            resetStatus()\r\n        })\r\n\r\n        return () => {\r\n            controller.abort()\r\n            window.removeEventListener('click', () => {\r\n                resetStatus()\r\n            })\r\n        }\r\n    }, [readPost, resetStatus, id, status])\r\n\r\n    const handleSubmit = (values, { resetForm }) => {\r\n        let options = {\r\n            method: !id ? 'POST' : 'PUT',\r\n            body: values\r\n        }\r\n\r\n        setLoader(true)\r\n        !id ? createPost('/posts', options) : updatePost(`/posts/${id}`, options)\r\n        if (!id) resetForm()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.NewPost}>\r\n            <div className={classes.Header}>\r\n                <h2>{!id ? 'Новий пост' : 'Редагувати пост'}</h2>\r\n            </div>\r\n            <div className={`wrapper ${classes.Form}`}>\r\n                <Formik\r\n                    enableReinitialize={true}\r\n                    initialValues={!id ? initialValues : currentPostValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={handleSubmit}>\r\n                    {() => {\r\n                        return (\r\n                            <Form>\r\n                                <FieldText id=\"img\" type=\"text\" label=\"URL зображення *\" />\r\n                                <FieldText id=\"title\" type=\"text\" label=\"назва *\" />\r\n                                <FieldTextArea id=\"text\" type=\"text\" label=\"текст *\" />\r\n                                <span className={status === 'success'\r\n                                                 ? `${classes.Msg} ${classes.Success}`\r\n                                                 : `${classes.Msg} ${classes.Failed}`}>\r\n                                    {!id\r\n                                    ? 'Пост успішно додано'\r\n                                    : 'Пост успішно змінено'}\r\n                                </span>\r\n                                <div className={classes.SubmitBtn}>\r\n                                    {isLoading\r\n                                     ? <div>\r\n                                           <ButtonSpinner\r\n                                               style={style}\r\n                                               color=\"#FF0000\"\r\n                                               loading={isLoading} />\r\n                                       </div>\r\n                                     : <button type=\"submit\">\r\n                                           запостити\r\n                                       </button>}\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withConnect(AdminForm, selectors, actions);\r\n"]},"metadata":{},"sourceType":"module"}